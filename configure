#!/bin/bash
# 2020-robot-code configuration file
#
# This file will automatically generates a makefile that runs all the sub-makefiles
#
# @author Connor Henley, @thatging3rkid 

# run an apt-get update if this is automated
if test -e "config.onpush" || test -e "config.full"; then
    if ! [[ -z "$CI" ]]; then
        sudo apt-get update -qq
    fi
fi

# install valgrind
if ! [ -x "$(command -v valgrind)" ]; then
    if ! [[ -z "$CI" ]]; then
        sudo apt-get install -y valgrind
    else
        printf "[*err] valgrind not installed\n"
    fi
fi

# install i2c development headers
if ! test -f "/usr/include/linux/i2c-dev.h"; then
    if ! [[ -z "${CI}" ]]; then
        sudo apt-get install -y libi2c-dev
    else
        printf "[warn] i2c headers not found\n"
    fi
fi

# Define the make mode
if test -e "config.onpush"; then
    make_mode="onpush"
elif test -e "config.full"; then
    make_mode="full"
else
    make_mode="dev"
fi

# generate the core Makefile
if test -d "./core"; then
    (cd ./core; ./configure)
fi

# debugging: log the make mode
printf '[info] make_mode=%s\n' ${make_mode}

# Start the makefile, put the header down
printf "" >Makefile
printf '# %s makefile\n' "${PWD##*/}" >>Makefile

# Print some debugging info into the file
printf '# configuration: %s\n' ${make_mode} >>Makefile
printf '# Generated on: %s at %s\n' "$HOSTNAME" "`date`" >>Makefile

# Mark directories to ignore
skips=("./.git/" "./.github/" "./obj/" "./tmp/")
if ! test -e "config.full"; then
    skips+=("./doc/")
fi

# Searh for Makefiles
dirs=()
for dir in ./*/
do
    # check if this should be skipped
    if [[ " ${skips[@]} " =~ " ${dir} " ]]; then
        continue
    fi

    # if there's a makefile, save it
    if test -f "${dir}/Makefile"; then
		dirs+=(${dir})
    fi
done
# add the robot makefile at the end
dirs+=("./robot.mk")

# Define the git hash
git_hash=`git describe --always`
if ! [[ $git_hash =~ [0-9a-f]{7} ]]; then
    git_hash="fffffff"
fi
git_hash="GIT_HASH="${git_hash}

# Build the parameter to pass to other makefiles
make_mode_param="MAKE_MODE=${make_mode^^}"

# define a function to generate each line of the makefile
#
# @param $1 the file/directory to generate a make entry for
# @param $2 the make command to run
gen_makefile_line(){
    # generate a make prefix (ignore errors for clean commands)
    make_cmd="make"
    if [[ "${2}" == "clean" ]]; then
        make_cmd="-make"
    fi

    # generate the specific make commands
    if test -f ${1}; then
        # make command for a specific file (i.e. make.mk)
        printf '\t%s %s %s -f %s %s\n' ${make_cmd} ${make_mode_param} ${git_hash} ${1} ${2} >>Makefile
    elif test -d ${1}; then
        # a make command for a directory with a Makefile
        printf '\t%s %s %s -C %s %s\n' ${make_cmd} ${make_mode_param} ${git_hash} ${1} ${2} >>Makefile
    fi
}

# Add the build-all instruction, ensuring that we clean before a build as cleaning will remove the obj dir
printf '\nall:\n' >>Makefile

# re-configure core first
printf '\tcd ./core; ./configure\n' >>Makefile

# run a clean before a on-push or full build, as this will remove the obj dir
if [[ "${make_mode}" != "dev" ]]; then
    for s in "${dirs[@]}"
    do
        if [[ "${s}" == "./core/" ]]; then
            continue
        fi
        gen_makefile_line ${s} "clean";
    done
fi

# generate the ci-build instructions
for s in "${dirs[@]}"
do
    gen_makefile_line ${s} "ci-build";
done
printf '\t@echo "Finished running ci-build for all"\n' >>Makefile

# Add the test instruction
printf '\ncheck:\n' >>Makefile
for s in "${dirs[@]}"
do
    # don't run tests on core
    if [[ "${s}" == "./core/" ]]; then
        continue
    fi
    gen_makefile_line ${s} "ci-test"
done
printf '\t@echo "Finished running ci-test for all"\n' >>Makefile

# Add the clean instruction
printf '\nclean:\n' >>Makefile
# We need to clean everything before we make anything, or the clean instructions will wipe all the previous obj files
for s in "${dirs[@]}"
do
    gen_makefile_line ${s} "clean";
done
printf '\t@echo "Finished running clean for all"\n' >>Makefile

echo "2020-robot-code configure complete!"
